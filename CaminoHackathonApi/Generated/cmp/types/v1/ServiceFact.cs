// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cmp/types/v1/service_fact.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cmp.Types.V1 {

  /// <summary>Holder for reflection information generated from cmp/types/v1/service_fact.proto</summary>
  public static partial class ServiceFactReflection {

    #region Descriptor
    /// <summary>File descriptor for cmp/types/v1/service_fact.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServiceFactReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9jbXAvdHlwZXMvdjEvc2VydmljZV9mYWN0LnByb3RvEgxjbXAudHlwZXMu",
            "djEaGGNtcC90eXBlcy92MS9wcmljZS5wcm90byKWAgoLU2VydmljZUZhY3QS",
            "DAoEY29kZRgBIAEoCRITCgtkZXNjcmlwdGlvbhgCIAEoCRIvCgxwcmljZV9k",
            "ZXRhaWwYAyABKAsyGS5jbXAudHlwZXMudjEuUHJpY2VEZXRhaWwSQAoRYXZh",
            "aWxhYmlsaXR5X3R5cGUYBCABKA4yJS5jbXAudHlwZXMudjEuU2VydmljZUF2",
            "YWlsYWJpbGl0eVR5cGUSMwoMY2hhcmdlX2Jhc2lzGAUgASgOMh0uY21wLnR5",
            "cGVzLnYxLkNoYXJnZUJhc2lzVHlwZRIqCgdkZXRhaWxzGAYgAygLMhkuY21w",
            "LnR5cGVzLnYxLlNlcnZpY2VGYWN0EhAKCHF1YW50aXR5GAcgASgFKr4BChdT",
            "ZXJ2aWNlQXZhaWxhYmlsaXR5VHlwZRIpCiVTRVJWSUNFX0FWQUlMQUJJTElU",
            "WV9UWVBFX1VOU1BFQ0lGSUVEEAASJgoiU0VSVklDRV9BVkFJTEFCSUxJVFlf",
            "VFlQRV9JTkNMVURFRBABEigKJFNFUlZJQ0VfQVZBSUxBQklMSVRZX1RZUEVf",
            "Q09NUFVMU09SWRACEiYKIlNFUlZJQ0VfQVZBSUxBQklMSVRZX1RZUEVfT1BU",
            "SU9OQUwQAyr9AQoPQ2hhcmdlQmFzaXNUeXBlEiEKHUNIQVJHRV9CQVNJU19U",
            "WVBFX1VOU1BFQ0lGSUVEEAASHQoZQ0hBUkdFX0JBU0lTX1RZUEVfUEVSX1BB",
            "WBABEiUKIUNIQVJHRV9CQVNJU19UWVBFX1BFUl9QQVhfUEVSX0RBWRACEh4K",
            "GkNIQVJHRV9CQVNJU19UWVBFX1BFUl9VTklUEAMSJgoiQ0hBUkdFX0JBU0lT",
            "X1RZUEVfUEVSX1VOSVRfUEVSX0RBWRAEEh0KGUNIQVJHRV9CQVNJU19UWVBF",
            "X1BFUl9EQVkQBRIaChZDSEFSR0VfQkFTSVNfVFlQRV9PTkNFEAZiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cmp.Types.V1.PriceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Cmp.Types.V1.ServiceAvailabilityType), typeof(global::Cmp.Types.V1.ChargeBasisType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmp.Types.V1.ServiceFact), global::Cmp.Types.V1.ServiceFact.Parser, new[]{ "Code", "Description", "PriceDetail", "AvailabilityType", "ChargeBasis", "Details", "Quantity" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ServiceAvailabilityType {
    [pbr::OriginalName("SERVICE_AVAILABILITY_TYPE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("SERVICE_AVAILABILITY_TYPE_INCLUDED")] Included = 1,
    [pbr::OriginalName("SERVICE_AVAILABILITY_TYPE_COMPULSORY")] Compulsory = 2,
    [pbr::OriginalName("SERVICE_AVAILABILITY_TYPE_OPTIONAL")] Optional = 3,
  }

  public enum ChargeBasisType {
    [pbr::OriginalName("CHARGE_BASIS_TYPE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("CHARGE_BASIS_TYPE_PER_PAX")] PerPax = 1,
    [pbr::OriginalName("CHARGE_BASIS_TYPE_PER_PAX_PER_DAY")] PerPaxPerDay = 2,
    [pbr::OriginalName("CHARGE_BASIS_TYPE_PER_UNIT")] PerUnit = 3,
    [pbr::OriginalName("CHARGE_BASIS_TYPE_PER_UNIT_PER_DAY")] PerUnitPerDay = 4,
    [pbr::OriginalName("CHARGE_BASIS_TYPE_PER_DAY")] PerDay = 5,
    [pbr::OriginalName("CHARGE_BASIS_TYPE_ONCE")] Once = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Service fact message type
  /// Service facts are smaller services that are included, can be booked optionally
  /// or must be booked together with a main product or service. For example on Christmas
  /// eve a gala dinner is included in the stay. Or an early check-in can be booked when
  /// travellers have an early flight. Or cleaning cost must be included for every booking
  /// of a holiday home.
  ///
  /// It is important that these optional, included or compulsory services are simple. For
  /// complex combinations like a hotel with a rent-a-car or a skipass or ski lessons, packages
  /// should be used so that each service can be described properly and a choice of what car,
  /// which ski pass and what level of ski class that be properly selected.
  ///
  /// ![Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/types/v1/service_fact.proto.dot.xs.svg)
  ///
  /// [Open Message Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/types/v1/service_fact.proto.dot.svg)
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ServiceFact : pb::IMessage<ServiceFact>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ServiceFact> _parser = new pb::MessageParser<ServiceFact>(() => new ServiceFact());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ServiceFact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmp.Types.V1.ServiceFactReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ServiceFact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ServiceFact(ServiceFact other) : this() {
      code_ = other.code_;
      description_ = other.description_;
      priceDetail_ = other.priceDetail_ != null ? other.priceDetail_.Clone() : null;
      availabilityType_ = other.availabilityType_;
      chargeBasis_ = other.chargeBasis_;
      details_ = other.details_.Clone();
      quantity_ = other.quantity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ServiceFact Clone() {
      return new ServiceFact(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private string code_ = "";
    /// <summary>
    /// A code for the specific service, when a service is optional, this code is
    /// referenced in the validate request, so that the optional service will be added
    /// to the booking.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// A description of the service like "business class", "shuttle transfer", "early
    /// check-in" etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price_detail" field.</summary>
    public const int PriceDetailFieldNumber = 3;
    private global::Cmp.Types.V1.PriceDetail priceDetail_;
    /// <summary>
    /// the price and price breakdown of the service
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cmp.Types.V1.PriceDetail PriceDetail {
      get { return priceDetail_; }
      set {
        priceDetail_ = value;
      }
    }

    /// <summary>Field number for the "availability_type" field.</summary>
    public const int AvailabilityTypeFieldNumber = 4;
    private global::Cmp.Types.V1.ServiceAvailabilityType availabilityType_ = global::Cmp.Types.V1.ServiceAvailabilityType.Unspecified;
    /// <summary>
    /// whether the service is included, optional or compulsory. When a price is
    /// mentioned and the service is included, then the price of the service is already
    /// included in the total price of this option and it is better to omit the
    /// price_detail field. In case of an optional or compulsory service, the service
    /// must be specifically be booked and the price is added to the total price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cmp.Types.V1.ServiceAvailabilityType AvailabilityType {
      get { return availabilityType_; }
      set {
        availabilityType_ = value;
      }
    }

    /// <summary>Field number for the "charge_basis" field.</summary>
    public const int ChargeBasisFieldNumber = 5;
    private global::Cmp.Types.V1.ChargeBasisType chargeBasis_ = global::Cmp.Types.V1.ChargeBasisType.Unspecified;
    /// <summary>
    /// The ChargeBasisType specifies whether this service is only charged once for the
    /// whole booking, for each participant, for each room or flight etc, for each day
    /// or for a combination of these concepts like for example "foreign distilleries
    /// per participant per day" or just once in case of a massage, but you would be
    /// able to order 3 of them in the booking.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cmp.Types.V1.ChargeBasisType ChargeBasis {
      get { return chargeBasis_; }
      set {
        chargeBasis_ = value;
      }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Cmp.Types.V1.ServiceFact> _repeated_details_codec
        = pb::FieldCodec.ForMessage(50, global::Cmp.Types.V1.ServiceFact.Parser);
    private readonly pbc::RepeatedField<global::Cmp.Types.V1.ServiceFact> details_ = new pbc::RepeatedField<global::Cmp.Types.V1.ServiceFact>();
    /// <summary>
    /// We can use a single ServiceFact to express just one service. But many services
    /// are actually a combination of several services, like the typical
    /// priority boarding, which also allows for a larger carry-on bag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Cmp.Types.V1.ServiceFact> Details {
      get { return details_; }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 7;
    private int quantity_;
    /// <summary>
    /// the count of the number of services. In case the service requires specification
    /// of the number or frequency of the products that will be included. For example
    /// "bouquet of roses, qty=24" or "baggage qty=2".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ServiceFact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ServiceFact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(PriceDetail, other.PriceDetail)) return false;
      if (AvailabilityType != other.AvailabilityType) return false;
      if (ChargeBasis != other.ChargeBasis) return false;
      if(!details_.Equals(other.details_)) return false;
      if (Quantity != other.Quantity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (priceDetail_ != null) hash ^= PriceDetail.GetHashCode();
      if (AvailabilityType != global::Cmp.Types.V1.ServiceAvailabilityType.Unspecified) hash ^= AvailabilityType.GetHashCode();
      if (ChargeBasis != global::Cmp.Types.V1.ChargeBasisType.Unspecified) hash ^= ChargeBasis.GetHashCode();
      hash ^= details_.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Code);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (priceDetail_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PriceDetail);
      }
      if (AvailabilityType != global::Cmp.Types.V1.ServiceAvailabilityType.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AvailabilityType);
      }
      if (ChargeBasis != global::Cmp.Types.V1.ChargeBasisType.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ChargeBasis);
      }
      details_.WriteTo(output, _repeated_details_codec);
      if (Quantity != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Quantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Code);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (priceDetail_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PriceDetail);
      }
      if (AvailabilityType != global::Cmp.Types.V1.ServiceAvailabilityType.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AvailabilityType);
      }
      if (ChargeBasis != global::Cmp.Types.V1.ChargeBasisType.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ChargeBasis);
      }
      details_.WriteTo(ref output, _repeated_details_codec);
      if (Quantity != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Quantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (priceDetail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PriceDetail);
      }
      if (AvailabilityType != global::Cmp.Types.V1.ServiceAvailabilityType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AvailabilityType);
      }
      if (ChargeBasis != global::Cmp.Types.V1.ChargeBasisType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChargeBasis);
      }
      size += details_.CalculateSize(_repeated_details_codec);
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quantity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ServiceFact other) {
      if (other == null) {
        return;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.priceDetail_ != null) {
        if (priceDetail_ == null) {
          PriceDetail = new global::Cmp.Types.V1.PriceDetail();
        }
        PriceDetail.MergeFrom(other.PriceDetail);
      }
      if (other.AvailabilityType != global::Cmp.Types.V1.ServiceAvailabilityType.Unspecified) {
        AvailabilityType = other.AvailabilityType;
      }
      if (other.ChargeBasis != global::Cmp.Types.V1.ChargeBasisType.Unspecified) {
        ChargeBasis = other.ChargeBasis;
      }
      details_.Add(other.details_);
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Code = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (priceDetail_ == null) {
              PriceDetail = new global::Cmp.Types.V1.PriceDetail();
            }
            input.ReadMessage(PriceDetail);
            break;
          }
          case 32: {
            AvailabilityType = (global::Cmp.Types.V1.ServiceAvailabilityType) input.ReadEnum();
            break;
          }
          case 40: {
            ChargeBasis = (global::Cmp.Types.V1.ChargeBasisType) input.ReadEnum();
            break;
          }
          case 50: {
            details_.AddEntriesFrom(input, _repeated_details_codec);
            break;
          }
          case 56: {
            Quantity = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Code = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (priceDetail_ == null) {
              PriceDetail = new global::Cmp.Types.V1.PriceDetail();
            }
            input.ReadMessage(PriceDetail);
            break;
          }
          case 32: {
            AvailabilityType = (global::Cmp.Types.V1.ServiceAvailabilityType) input.ReadEnum();
            break;
          }
          case 40: {
            ChargeBasis = (global::Cmp.Types.V1.ChargeBasisType) input.ReadEnum();
            break;
          }
          case 50: {
            details_.AddEntriesFrom(ref input, _repeated_details_codec);
            break;
          }
          case 56: {
            Quantity = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
