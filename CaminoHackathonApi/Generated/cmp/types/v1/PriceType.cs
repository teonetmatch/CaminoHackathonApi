// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cmp/types/v1/price_type.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cmp.Types.V1 {

  /// <summary>Holder for reflection information generated from cmp/types/v1/price_type.proto</summary>
  public static partial class PriceTypeReflection {

    #region Descriptor
    /// <summary>File descriptor for cmp/types/v1/price_type.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PriceTypeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1jbXAvdHlwZXMvdjEvcHJpY2VfdHlwZS5wcm90bxIMY21wLnR5cGVzLnYx",
            "Iq8BChJQcmljZUJyZWFrZG93blR5cGUSDAoEY29kZRgBIAEoCRItCgpwcmlj",
            "ZV90eXBlGAIgASgOMhcuY21wLnR5cGVzLnYxLlByaWNlVHlwZUgAEikKCHRh",
            "eF9jb2RlGAMgASgOMhUuY21wLnR5cGVzLnYxLlRheENvZGVIABIpCghmZWVf",
            "Y29kZRgEIAEoDjIVLmNtcC50eXBlcy52MS5GZWVDb2RlSABCBgoEdHlwZSp6",
            "CgpDaGFyZ2VUeXBlEhsKF0NIQVJHRV9UWVBFX1VOU1BFQ0lGSUVEEAASGgoW",
            "Q0hBUkdFX1RZUEVfUEVSX1BFUlNPThABEhkKFUNIQVJHRV9UWVBFX1BFUl9H",
            "Uk9VUBACEhgKFENIQVJHRV9UWVBFX1BFUl9VTklUEAMqsgIKCVByaWNlVHlw",
            "ZRIaChZQUklDRV9UWVBFX1VOU1BFQ0lGSUVEEAASGAoUUFJJQ0VfVFlQRV9C",
            "QVNFX1JBVEUQARIXChNQUklDRV9UWVBFX09WRVJSSURFEAISEwoPUFJJQ0Vf",
            "VFlQRV9SQVRFEAMSEwoPUFJJQ0VfVFlQRV9GQVJFEAQSHgoaUFJJQ0VfVFlQ",
            "RV9FWFRSQV9QQVNTRU5HRVIQBRITCg9QUklDRV9UWVBFX1VOSVQQBhIWChJQ",
            "UklDRV9UWVBFX1NFUlZJQ0UQBxIaChZQUklDRV9UWVBFX1NVQl9TRVJWSUNF",
            "EAgSFAoQUFJJQ0VfVFlQRV9PRkZFUhAJEhcKE1BSSUNFX1RZUEVfRElTQ09V",
            "TlQQChIUChBQUklDRV9UWVBFX0VYVFJBEAsqpgcKB1RheENvZGUSGAoUVEFY",
            "X0NPREVfVU5TUEVDSUZJRUQQABIbChdUQVhfQ09ERV9BU1NFU1NNRU5UX1RB",
            "WBABEhgKFFRBWF9DT0RFX0xJQ0VOU0VfVEFYEAISFAoQVEFYX0NPREVfQkVE",
            "X1RBWBADEiIKHlRBWF9DT0RFX0NISUxEX1JPTExBV0FZX0NIQVJHRRAEEhUK",
            "EVRBWF9DT0RFX0NJVFlfVEFYEAUSGwoXVEFYX0NPREVfQ09OVkVOVElPTl9U",
            "QVgQBhIYChRUQVhfQ09ERV9DT1VOVFJZX1RBWBAHEhcKE1RBWF9DT0RFX0NP",
            "VU5UWV9UQVgQCBIaChZUQVhfQ09ERV9ERVBBUlRVUkVfVEFYEAkSFwoTVEFY",
            "X0NPREVfRU5FUkdZX1RBWBAKEhgKFFRBWF9DT0RFX0ZFREVSQUxfVEFYEAsS",
            "IgoeVEFYX0NPREVfRk9PRF9BTkRfQkVWRVJBR0VfVEFYEAwSFQoRVEFYX0NP",
            "REVfRk9PRF9UQVgQDRIfChtUQVhfQ09ERV9HRU5FUkFMX0VYQ0lTRV9UQVgQ",
            "DhIjCh9UQVhfQ09ERV9HT09EU19BTkRfU0VSVklDRVNfVEFYEA8SIgoeVEFY",
            "X0NPREVfSU5TVVJBTkNFX1BSRU1JVU1fVEFYEBASHgoaVEFYX0NPREVfSU5U",
            "RVJOQVRJT05BTF9UQVgQERIXChNUQVhfQ09ERV9MRVNTT1JfVEFYEBISGAoU",
            "VEFYX0NPREVfTE9ER0lOR19UQVgQExIkCiBUQVhfQ09ERV9OQVRJT05BTF9H",
            "T1ZFUk5NRU5UX1RBWBAUEhoKFlRBWF9DT0RFX09DQ1VQQU5DWV9UQVgQFRIV",
            "ChFUQVhfQ09ERV9ST09NX1RBWBAWEhYKElRBWF9DT0RFX1NBTEVTX1RBWBAX",
            "EhkKFVRBWF9DT0RFX1NUQU5EQVJEX1RBWBAYEhYKElRBWF9DT0RFX1NUQVRF",
            "X1RBWBAZEh4KGlRBWF9DT0RFX1NVUlBMVVNfTElORVNfVEFYEBoSFwoTVEFY",
            "X0NPREVfVEFYX0VYRU1QVBAbEhgKFFRBWF9DT0RFX1RPQkFDQ09fVEFYEBwS",
            "FgoSVEFYX0NPREVfVE9UQUxfVEFYEB0SGAoUVEFYX0NPREVfVE9VUklTTV9U",
            "QVgQHhIcChhUQVhfQ09ERV9WQUxVRV9BRERFRF9UQVgQHxIbChdUQVhfQ09E",
            "RV9aRVJPX1JBVEVEX1RBWBAgKrUnCgdGZWVDb2RlEhgKFEZFRV9DT0RFX1VO",
            "U1BFQ0lGSUVEEAASGwoXRkVFX0NPREVfQURESVRJT05BTF9EQVkQARIgChxG",
            "RUVfQ09ERV9BRERJVElPTkFMX0RJU1RBTkNFEAISHQoZRkVFX0NPREVfQURE",
            "SVRJT05BTF9EUklWRRADEiIKHkZFRV9DT0RFX0FERElUSU9OQUxfRFJJVkVS",
            "X0ZFRRAEEhwKGEZFRV9DT0RFX0FERElUSU9OQUxfSE9VUhAFEhwKGEZFRV9D",
            "T0RFX0FERElUSU9OQUxfV0VFSxAGEiYKIkZFRV9DT0RFX0FERExfREVWSUFU",
            "SU9OX1NWQ19DSEFSR0UQBxIXChNGRUVfQ09ERV9BREpVU1RNRU5UEAgSHwob",
            "RkVFX0NPREVfQURNSU5JU1RSQVRJT05fRkVFEAkSHwobRkVFX0NPREVfQURV",
            "TFRfUk9MTEFXQVlfRkVFEAoSHQoZRkVFX0NPREVfQUdFX0RJRkZFUkVOVElB",
            "TBALEh4KGkZFRV9DT0RFX0FJUl9DQU5DRUxfQ0hBUkdFEAwSJwojRkVFX0NP",
            "REVfQUlSX0NPTkRJVElPTklOR19TVVJDSEFSR0UQDRIfChtGRUVfQ09ERV9B",
            "SVJfREVQT1NJVF9DSEFSR0UQDhIeChpGRUVfQ09ERV9BSVJfVElDS0VUX0NI",
            "QVJHRRAPEh8KG0ZFRV9DT0RFX0FJUlBPUlRfQUNDRVNTX0ZFRRAQEiwKKEZF",
            "RV9DT0RFX0FJUlBPUlRfQ09OQ0VTU0lPTl9GRUVfUkVDT1ZFUlkQERIlCiFG",
            "RUVfQ09ERV9BSVJQT1JUX0NPTlNUUlVDVElPTl9GRUUQEhIhCh1GRUVfQ09E",
            "RV9BSVJQT1JUX0NPTlRSQUNUX0ZFRRATEhgKFEZFRV9DT0RFX0FJUlBPUlRf",
            "RkVFEBQSHgoaRkVFX0NPREVfQUlSUE9SVF9TVVJDSEFSR0UQFRIaChZGRUVf",
            "Q09ERV9BTUVORE1FTlRfRkVFEBYSHAoYRkVFX0NPREVfQVBQTElDQVRJT05f",
            "RkVFEBcSGAoURkVFX0NPREVfQVVUT19FWENJU0UQGBIaChZGRUVfQ09ERV9B",
            "Vl9TVVBQTFlfRkVFEBkSIAocRkVFX0NPREVfQkFOUVVFVF9TRVJWSUNFX0ZF",
            "RRAaEhgKFEZFRV9DT0RFX0JPT0tJTkdfRkVFEBsSIAocRkVFX0NPREVfQk9S",
            "REVSX0NST1NTSU5HX0ZFRRAcEh0KGUZFRV9DT0RFX0NBTkNFTExBVElPTl9G",
            "RUUQHRIeChpGRUVfQ09ERV9DQU5DRUxMQVRJT05fRkVFUxAeEhkKFUZFRV9D",
            "T0RFX0NBUl9TRUFUX0ZFRRAfEhoKFkZFRV9DT0RFX0NBUkJPTl9PRkZTRVQQ",
            "IBIgChxGRUVfQ09ERV9DSEFSSVRZX1NVUFBPUlRfRkVFECESGwoXRkVFX0NP",
            "REVfQ0lUWV9IT1RFTF9GRUUQIhIgChxGRUVfQ09ERV9DSVRZX01JVElHQVRJ",
            "T05fRkVFECMSHgoaRkVFX0NPREVfQ0lUWV9QUk9KRUNUX0ZVTkQQJBIZChVG",
            "RUVfQ09ERV9DTEVBTklOR19GRUUQJRIbChdGRUVfQ09ERV9DT05DRVNTSU9O",
            "X0ZFRRAmEiQKIEZFRV9DT0RFX0NPTkNFU1NJT05fUkVDT1ZFUllfRkVFECcS",
            "GQoVRkVFX0NPREVfQ09OVFJBQ1RfRkVFECgSGwoXRkVFX0NPREVfQ09OVkVO",
            "VElPTl9GRUUQKRIYChRGRUVfQ09ERV9UT1VSSVNNX0ZFRRAqEh8KG0ZFRV9D",
            "T0RFX0NPVU5UWV9MSUNFTlNFX0ZFRRArEh0KGUZFRV9DT0RFX0NPVU5UWV9T",
            "VVJDSEFSR0UQLBIXChNGRUVfQ09ERV9DT1VOVFlfVEFYEC0SFQoRRkVFX0NP",
            "REVfQ09WRVJBR0UQLhIVChFGRUVfQ09ERV9DUklCX0ZFRRAvEh4KGkZFRV9D",
            "T0RFX0NSVUlTRV9DQU5DRUxfRkVFEDASHgoaRkVFX0NPREVfQ1VTVE9NRVJf",
            "RFJPUF9PRkYQMRIlCiFGRUVfQ09ERV9DVVNUT01FUl9GQUNJTElUWV9DSEFS",
            "R0UQMhIcChhGRUVfQ09ERV9DVVNUT01FUl9QSUNLVVAQMxIfChtGRUVfQ09E",
            "RV9ERVBBUlRVUkVfVEFYX0ZFRVMQNBIkCiBGRUVfQ09ERV9ERVNUSU5BVElP",
            "Tl9BTUVOSVRZX0ZFRRA1EiYKIkZFRV9DT0RFX0RFU1RJTkFUSU9OX01BUktF",
            "VElOR19GRUUQNhIVChFGRUVfQ09ERV9ESVNDT1VOVBA3EiEKHUZFRV9DT0RF",
            "X0RPQ1VNRU5UX1JFSVNTVUVfRkVFEDgSEQoNRkVFX0NPREVfRFJPUBA5EhkK",
            "FUZFRV9DT0RFX0VBUkxZX0FNX0ZFRRA6Eh8KG0ZFRV9DT0RFX0VBUkxZX0NI",
            "RUNLT1VUX0ZFRRA7Eh0KGUZFRV9DT0RFX0VORVJHWV9TVVJDSEFSR0UQPBIk",
            "CiBGRUVfQ09ERV9FTlZJUk9OTUVOVEFMX1NVUkNIQVJHRRA9EhYKEkZFRV9D",
            "T0RFX0VRVUlQTUVOVBA+EhYKEkZFRV9DT0RFX0VWRU5UX0ZFRRA/EiEKHUZF",
            "RV9DT0RFX0VYUFJFU1NfSEFORExJTkdfRkVFEEASHwobRkVFX0NPREVfRVhU",
            "UkFfQ0hJTERfQ0hBUkdFEEESIAocRkVFX0NPREVfRVhUUkFfUEVSU09OX0NI",
            "QVJHRRBCEhkKFUZFRV9DT0RFX0ZBQ0lMSVRZX0ZFRRBDEhAKDEZFRV9DT0RF",
            "X0ZFRRBEEhEKDUZFRV9DT0RFX0ZVRUwQRRIlCiFGRUVfQ09ERV9GVUVMX0NP",
            "U1RfUFJJQ0VfSU5DUkVBU0UQRhIbChdGRUVfQ09ERV9GVUVMX1NVUkNIQVJH",
            "RRBHEh8KG0ZFRV9DT0RFX0dFTkVSQUxfRVhDSVNFX1RBWBBIEiIKHkZFRV9D",
            "T0RFX0dPT0RTX0FORF9TRVJWSUNFX0ZFRRBJEicKI0ZFRV9DT0RFX0dPVkVS",
            "Tk1FTlRfUkFURV9TVVBQTEVNRU5UEEoSKAokRkVFX0NPREVfR09WRVJOTUVO",
            "VF9SRU5UQUxfU1VSQ0hBUkdFEEsSGAoURkVFX0NPREVfR1JFRU5TX0ZFRVMQ",
            "TBIfChtGRUVfQ09ERV9HUk9TU19SRUNFSVBUU19GRUUQTRIZChVGRUVfQ09E",
            "RV9HVUVTVF9QQ19GRUUQThIiCh5GRUVfQ09ERV9ISUdIX1NFQVNPTl9TVVJD",
            "SEFSR0UQTxIfChtGRUVfQ09ERV9ISUdIV0FZX1VTRV9DSEFSR0UQUBIeChpG",
            "RUVfQ09ERV9IT0xJREFZX1NVUkNIQVJHRRBREiIKHkZFRV9DT0RFX0hPVEVM",
            "X0RFVkVMT1BNRU5UX0ZFRRBSEi0KKUZFRV9DT0RFX0NISUxEX1JFU1RSQUlO",
            "VF9ERVZJQ0VfU1VSQ0hBUkdFEFMSJAogRkVFX0NPREVfSU5TVVJBTkNFX0NB",
            "TkNFTF9DSEFSR0UQVBIaChZGRUVfQ09ERV9JTlNVUkFOQ0VfRkVFEFUSGAoU",
            "RkVFX0NPREVfTEFURV9QTV9GRUUQVhIjCh9GRUVfQ09ERV9MSUNFTlNFX1JF",
            "Q09VUE1FTlRfRkVFEFcSJAogRkVFX0NPREVfTE9DQUxfQU1FTklUWV9VU0FH",
            "RV9GRUUQWBIcChhGRUVfQ09ERV9NQUlOVEVOQU5DRV9GRUUQWRIWChJGRUVf",
            "Q09ERV9MT0NBTF9GRUUQWhIhCh1GRUVfQ09ERV9MT0NBTF9HT1ZFUk5NRU5U",
            "X0ZFRRBbEiYKIkZFRV9DT0RFX0xPQ0FMX09SRElOQU5DRV9TVVJDSEFSR0UQ",
            "XBIiCh5GRUVfQ09ERV9MT0NBVElPTl9DVVNUT01FUl9GRUUQXRIlCiFGRUVf",
            "Q09ERV9NQUlOVEVOQU5DRV9GQUNJTElUWV9GRUUQXhIkCiBGRUVfQ09ERV9N",
            "QU5EQVRPUllfQ0hBUkdFU19UT1RBTBBgEh4KGkZFRV9DT0RFX01JU0NFTExB",
            "TkVPVVNfRkVFEGESGwoXRkVFX0NPREVfTUlUSUdBVElPTl9GRUUQYhIhCh1G",
            "RUVfQ09ERV9NT1RPUl9WRUhJQ0xFX0NIQVJHRRBjEhwKGEZFRV9DT0RFX05B",
            "TUVfQ0hBTkdFX0ZFRRBkEhUKEUZFRV9DT0RFX09QVElPTkFMEGUSHQoZRkVF",
            "X0NPREVfT1VUX09GX0hPVVJTX0ZFRRBmEiIKHkZFRV9DT0RFX1BBQ0tBR0Vf",
            "Q0FOQ0VMX0NIQVJHRRBnEhgKFEZFRV9DT0RFX1BBQ0tBR0VfRkVFEGgSGAoU",
            "RkVFX0NPREVfUEFSS0lOR19GRUUQaRIjCh9GRUVfQ09ERV9QQVNTRU5HRVJf",
            "U0VSVklDRVNfRkVFEGoSIgoeRkVFX0NPREVfUEFZX09OX0FSUklWQUxfQU1P",
            "VU5UEGsSEwoPRkVFX0NPREVfUENfRkVFEGwSGAoURkVFX0NPREVfUEVOQUxU",
            "WV9GRUUQbRIfChtGRUVfQ09ERV9QRVRfU0FOSVRBVElPTl9GRUUQbhIaChZG",
            "RUVfQ09ERV9QRVRfU1VSQ0hBUkdFEG8SJwojRkVFX0NPREVfUFJFTUlVTV9M",
            "T0NBVElPTl9TVVJDSEFSR0UQcBIZChVGRUVfQ09ERV9QUkVQQUlEX0ZVRUwQ",
            "cRIaChZGRUVfQ09ERV9QUkVQQVlfQU1PVU5UEHISHwobRkVFX0NPREVfUFRB",
            "X1NFUlZJQ0VfQ0hBUkdFEHMSIAocRkVFX0NPREVfUkVGVUVMSU5HX1NVUkNI",
            "QVJHRRB0Eh8KG0ZFRV9DT0RFX1JFRlVOREFCTEVfUEVUX0ZFRRB1Eh0KGUZF",
            "RV9DT0RFX1JFR0lTVFJBVElPTl9GRUUQdhIeChpGRUVfQ09ERV9SRUlNQlVS",
            "U0VNRU5UX0ZFRRB3EhcKE0ZFRV9DT0RFX1JFU09SVF9GRUUQeBIkCiBGRUVf",
            "Q09ERV9ST0FEX1NBRkVUWV9QUk9HUkFNX0ZFRRB5EiEKHUZFRV9DT0RFX1JP",
            "QURfVVNBR0VfU1VSQ0hBUkdFEHoSGQoVRkVFX0NPREVfUk9MTEFXQVlfRkVF",
            "EHsSHQoZRkVFX0NPREVfUk9PTV9TRVJWSUNFX0ZFRRB8EhcKE0ZFRV9DT0RF",
            "X1NDUkVFTl9GRUUQfRIZChVGRUVfQ09ERV9TRUNVUklUWV9GRUUQfhITCg9G",
            "RUVfQ09ERV9TRU5JT1IQfxIcChdGRUVfQ09ERV9TRVJWSUNFX0NIQVJHRRCA",
            "ARIZChRGRUVfQ09ERV9TRVJWSUNFX0ZFRRCBARIhChxGRUVfQ09ERV9TSE9S",
            "RV9FWENVUlNJT05fRkVFEIIBEjEKLEZFRV9DT0RFX1NUQU5EQVJEX0ZPT0Rf",
            "QU5EX0JFVkVSQUdFX0dSQVRVSVRZEIMBEiUKIEZFRV9DT0RFX1NUQVRFX0NP",
            "U1RfUkVDT1ZFUllfRkVFEIQBEh4KGUZFRV9DT0RFX1NUQVRFX1JFTlRBTF9G",
            "RUUQhQESHQoYRkVFX0NPREVfU1RBVEVfU1VSQ0hBUkdFEIYBEiAKG0ZFRV9D",
            "T0RFX1NUQVRFX1RPVVJJU01fRlVORBCHARIWChFGRUVfQ09ERV9TVUJUT1RB",
            "TBCIARIXChJGRUVfQ09ERV9TVVJDSEFSR0UQiQESKwomRkVFX0NPREVfU1VS",
            "RkFDRV9UUkFOU1BPUlRBVElPTl9DSEFSR0UQigESIAobRkVFX0NPREVfU1VT",
            "VEFJTkFCSUxJVFlfRkVFEIsBEhEKDEZFRV9DT0RFX1RBWBCMARIbChZGRUVf",
            "Q09ERV9USUNLRVRJTkdfRkVFEI0BEiIKHUZFRV9DT0RFX1RJUkVfQU5EX0JB",
            "VFRFUllfRkVFEI4BEiEKHEZFRV9DT0RFX1RJUkVfTUFOQUdFTUVOVF9GRUUQ",
            "jwESHgoZRkVFX0NPREVfVE9UQUxfU1VSQ0hBUkdFUxCQARIcChdGRUVfQ09E",
            "RV9UT1VSSVNNX0NIQVJHRRCRARIdChhGRUVfQ09ERV9UUkFOU0FDVElPTl9G",
            "RUUQkgESIAobRkVFX0NPREVfVFJBTlNQT1JUQVRJT05fRkVFEJMBEhoKFUZF",
            "RV9DT0RFX1RSQU5TRkVSX0ZFRRCUARIdChhGRUVfQ09ERV9UUkFWRUxfVElN",
            "RV9GRUUQlQESHAoXRkVFX0NPREVfVV9EUklWRV9JVF9GRUUQlgESJAofRkVF",
            "X0NPREVfVkFMSURBVElOR19DQVJSSUVSX0ZFRRCXARIgChtGRUVfQ09ERV9W",
            "RUhJQ0xFX0NPTExFQ1RJT04QmAESHgoZRkVFX0NPREVfVkVISUNMRV9ERUxJ",
            "VkVSWRCZARIhChxGRUVfQ09ERV9WRUhJQ0xFX0xJQ0VOU0VfRkVFEJoBEiUK",
            "IEZFRV9DT0RFX1ZFSElDTEVfTUFJTlRFTkFOQ0VfRkVFEJsBEhwKF0ZFRV9D",
            "T0RFX1ZFSElDTEVfUkVOVEFMEJwBEiMKHkZFRV9DT0RFX1dJTlRFUl9TRVJW",
            "SUNFX0NIQVJHRRCdARIaChVGRUVfQ09ERV9ZT1VOR19EUklWRVIQngESHAoX",
            "RkVFX0NPREVfWU9VTkdFUl9EUklWRVIQnwFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Cmp.Types.V1.ChargeType), typeof(global::Cmp.Types.V1.PriceType), typeof(global::Cmp.Types.V1.TaxCode), typeof(global::Cmp.Types.V1.FeeCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmp.Types.V1.PriceBreakdownType), global::Cmp.Types.V1.PriceBreakdownType.Parser, new[]{ "Code", "PriceType", "TaxCode", "FeeCode" }, new[]{ "Type" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// The ChargeType defines whether a price is per person, per group or per unit. Enum
  /// might be amended upon request.
  /// </summary>
  public enum ChargeType {
    [pbr::OriginalName("CHARGE_TYPE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("CHARGE_TYPE_PER_PERSON")] PerPerson = 1,
    [pbr::OriginalName("CHARGE_TYPE_PER_GROUP")] PerGroup = 2,
    [pbr::OriginalName("CHARGE_TYPE_PER_UNIT")] PerUnit = 3,
  }

  public enum PriceType {
    [pbr::OriginalName("PRICE_TYPE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("PRICE_TYPE_BASE_RATE")] BaseRate = 1,
    [pbr::OriginalName("PRICE_TYPE_OVERRIDE")] Override = 2,
    [pbr::OriginalName("PRICE_TYPE_RATE")] Rate = 3,
    [pbr::OriginalName("PRICE_TYPE_FARE")] Fare = 4,
    [pbr::OriginalName("PRICE_TYPE_EXTRA_PASSENGER")] ExtraPassenger = 5,
    [pbr::OriginalName("PRICE_TYPE_UNIT")] Unit = 6,
    [pbr::OriginalName("PRICE_TYPE_SERVICE")] Service = 7,
    [pbr::OriginalName("PRICE_TYPE_SUB_SERVICE")] SubService = 8,
    [pbr::OriginalName("PRICE_TYPE_OFFER")] Offer = 9,
    [pbr::OriginalName("PRICE_TYPE_DISCOUNT")] Discount = 10,
    [pbr::OriginalName("PRICE_TYPE_EXTRA")] Extra = 11,
  }

  public enum TaxCode {
    [pbr::OriginalName("TAX_CODE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("TAX_CODE_ASSESSMENT_TAX")] AssessmentTax = 1,
    [pbr::OriginalName("TAX_CODE_LICENSE_TAX")] LicenseTax = 2,
    [pbr::OriginalName("TAX_CODE_BED_TAX")] BedTax = 3,
    [pbr::OriginalName("TAX_CODE_CHILD_ROLLAWAY_CHARGE")] ChildRollawayCharge = 4,
    [pbr::OriginalName("TAX_CODE_CITY_TAX")] CityTax = 5,
    [pbr::OriginalName("TAX_CODE_CONVENTION_TAX")] ConventionTax = 6,
    [pbr::OriginalName("TAX_CODE_COUNTRY_TAX")] CountryTax = 7,
    [pbr::OriginalName("TAX_CODE_COUNTY_TAX")] CountyTax = 8,
    [pbr::OriginalName("TAX_CODE_DEPARTURE_TAX")] DepartureTax = 9,
    [pbr::OriginalName("TAX_CODE_ENERGY_TAX")] EnergyTax = 10,
    [pbr::OriginalName("TAX_CODE_FEDERAL_TAX")] FederalTax = 11,
    [pbr::OriginalName("TAX_CODE_FOOD_AND_BEVERAGE_TAX")] FoodAndBeverageTax = 12,
    [pbr::OriginalName("TAX_CODE_FOOD_TAX")] FoodTax = 13,
    [pbr::OriginalName("TAX_CODE_GENERAL_EXCISE_TAX")] GeneralExciseTax = 14,
    [pbr::OriginalName("TAX_CODE_GOODS_AND_SERVICES_TAX")] GoodsAndServicesTax = 15,
    [pbr::OriginalName("TAX_CODE_INSURANCE_PREMIUM_TAX")] InsurancePremiumTax = 16,
    [pbr::OriginalName("TAX_CODE_INTERNATIONAL_TAX")] InternationalTax = 17,
    [pbr::OriginalName("TAX_CODE_LESSOR_TAX")] LessorTax = 18,
    [pbr::OriginalName("TAX_CODE_LODGING_TAX")] LodgingTax = 19,
    [pbr::OriginalName("TAX_CODE_NATIONAL_GOVERNMENT_TAX")] NationalGovernmentTax = 20,
    [pbr::OriginalName("TAX_CODE_OCCUPANCY_TAX")] OccupancyTax = 21,
    [pbr::OriginalName("TAX_CODE_ROOM_TAX")] RoomTax = 22,
    [pbr::OriginalName("TAX_CODE_SALES_TAX")] SalesTax = 23,
    [pbr::OriginalName("TAX_CODE_STANDARD_TAX")] StandardTax = 24,
    [pbr::OriginalName("TAX_CODE_STATE_TAX")] StateTax = 25,
    [pbr::OriginalName("TAX_CODE_SURPLUS_LINES_TAX")] SurplusLinesTax = 26,
    [pbr::OriginalName("TAX_CODE_TAX_EXEMPT")] TaxExempt = 27,
    [pbr::OriginalName("TAX_CODE_TOBACCO_TAX")] TobaccoTax = 28,
    [pbr::OriginalName("TAX_CODE_TOTAL_TAX")] TotalTax = 29,
    [pbr::OriginalName("TAX_CODE_TOURISM_TAX")] TourismTax = 30,
    [pbr::OriginalName("TAX_CODE_VALUE_ADDED_TAX")] ValueAddedTax = 31,
    [pbr::OriginalName("TAX_CODE_ZERO_RATED_TAX")] ZeroRatedTax = 32,
  }

  public enum FeeCode {
    [pbr::OriginalName("FEE_CODE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FEE_CODE_ADDITIONAL_DAY")] AdditionalDay = 1,
    [pbr::OriginalName("FEE_CODE_ADDITIONAL_DISTANCE")] AdditionalDistance = 2,
    [pbr::OriginalName("FEE_CODE_ADDITIONAL_DRIVE")] AdditionalDrive = 3,
    [pbr::OriginalName("FEE_CODE_ADDITIONAL_DRIVER_FEE")] AdditionalDriverFee = 4,
    [pbr::OriginalName("FEE_CODE_ADDITIONAL_HOUR")] AdditionalHour = 5,
    [pbr::OriginalName("FEE_CODE_ADDITIONAL_WEEK")] AdditionalWeek = 6,
    [pbr::OriginalName("FEE_CODE_ADDL_DEVIATION_SVC_CHARGE")] AddlDeviationSvcCharge = 7,
    [pbr::OriginalName("FEE_CODE_ADJUSTMENT")] Adjustment = 8,
    [pbr::OriginalName("FEE_CODE_ADMINISTRATION_FEE")] AdministrationFee = 9,
    [pbr::OriginalName("FEE_CODE_ADULT_ROLLAWAY_FEE")] AdultRollawayFee = 10,
    [pbr::OriginalName("FEE_CODE_AGE_DIFFERENTIAL")] AgeDifferential = 11,
    [pbr::OriginalName("FEE_CODE_AIR_CANCEL_CHARGE")] AirCancelCharge = 12,
    [pbr::OriginalName("FEE_CODE_AIR_CONDITIONING_SURCHARGE")] AirConditioningSurcharge = 13,
    [pbr::OriginalName("FEE_CODE_AIR_DEPOSIT_CHARGE")] AirDepositCharge = 14,
    [pbr::OriginalName("FEE_CODE_AIR_TICKET_CHARGE")] AirTicketCharge = 15,
    [pbr::OriginalName("FEE_CODE_AIRPORT_ACCESS_FEE")] AirportAccessFee = 16,
    [pbr::OriginalName("FEE_CODE_AIRPORT_CONCESSION_FEE_RECOVERY")] AirportConcessionFeeRecovery = 17,
    [pbr::OriginalName("FEE_CODE_AIRPORT_CONSTRUCTION_FEE")] AirportConstructionFee = 18,
    [pbr::OriginalName("FEE_CODE_AIRPORT_CONTRACT_FEE")] AirportContractFee = 19,
    [pbr::OriginalName("FEE_CODE_AIRPORT_FEE")] AirportFee = 20,
    [pbr::OriginalName("FEE_CODE_AIRPORT_SURCHARGE")] AirportSurcharge = 21,
    [pbr::OriginalName("FEE_CODE_AMENDMENT_FEE")] AmendmentFee = 22,
    [pbr::OriginalName("FEE_CODE_APPLICATION_FEE")] ApplicationFee = 23,
    [pbr::OriginalName("FEE_CODE_AUTO_EXCISE")] AutoExcise = 24,
    [pbr::OriginalName("FEE_CODE_AV_SUPPLY_FEE")] AvSupplyFee = 25,
    [pbr::OriginalName("FEE_CODE_BANQUET_SERVICE_FEE")] BanquetServiceFee = 26,
    [pbr::OriginalName("FEE_CODE_BOOKING_FEE")] BookingFee = 27,
    [pbr::OriginalName("FEE_CODE_BORDER_CROSSING_FEE")] BorderCrossingFee = 28,
    [pbr::OriginalName("FEE_CODE_CANCELLATION_FEE")] CancellationFee = 29,
    [pbr::OriginalName("FEE_CODE_CANCELLATION_FEES")] CancellationFees = 30,
    [pbr::OriginalName("FEE_CODE_CAR_SEAT_FEE")] CarSeatFee = 31,
    [pbr::OriginalName("FEE_CODE_CARBON_OFFSET")] CarbonOffset = 32,
    [pbr::OriginalName("FEE_CODE_CHARITY_SUPPORT_FEE")] CharitySupportFee = 33,
    [pbr::OriginalName("FEE_CODE_CITY_HOTEL_FEE")] CityHotelFee = 34,
    [pbr::OriginalName("FEE_CODE_CITY_MITIGATION_FEE")] CityMitigationFee = 35,
    [pbr::OriginalName("FEE_CODE_CITY_PROJECT_FUND")] CityProjectFund = 36,
    [pbr::OriginalName("FEE_CODE_CLEANING_FEE")] CleaningFee = 37,
    [pbr::OriginalName("FEE_CODE_CONCESSION_FEE")] ConcessionFee = 38,
    [pbr::OriginalName("FEE_CODE_CONCESSION_RECOVERY_FEE")] ConcessionRecoveryFee = 39,
    [pbr::OriginalName("FEE_CODE_CONTRACT_FEE")] ContractFee = 40,
    [pbr::OriginalName("FEE_CODE_CONVENTION_FEE")] ConventionFee = 41,
    [pbr::OriginalName("FEE_CODE_TOURISM_FEE")] TourismFee = 42,
    [pbr::OriginalName("FEE_CODE_COUNTY_LICENSE_FEE")] CountyLicenseFee = 43,
    [pbr::OriginalName("FEE_CODE_COUNTY_SURCHARGE")] CountySurcharge = 44,
    [pbr::OriginalName("FEE_CODE_COUNTY_TAX")] CountyTax = 45,
    [pbr::OriginalName("FEE_CODE_COVERAGE")] Coverage = 46,
    [pbr::OriginalName("FEE_CODE_CRIB_FEE")] CribFee = 47,
    [pbr::OriginalName("FEE_CODE_CRUISE_CANCEL_FEE")] CruiseCancelFee = 48,
    [pbr::OriginalName("FEE_CODE_CUSTOMER_DROP_OFF")] CustomerDropOff = 49,
    [pbr::OriginalName("FEE_CODE_CUSTOMER_FACILITY_CHARGE")] CustomerFacilityCharge = 50,
    [pbr::OriginalName("FEE_CODE_CUSTOMER_PICKUP")] CustomerPickup = 51,
    [pbr::OriginalName("FEE_CODE_DEPARTURE_TAX_FEES")] DepartureTaxFees = 52,
    [pbr::OriginalName("FEE_CODE_DESTINATION_AMENITY_FEE")] DestinationAmenityFee = 53,
    [pbr::OriginalName("FEE_CODE_DESTINATION_MARKETING_FEE")] DestinationMarketingFee = 54,
    [pbr::OriginalName("FEE_CODE_DISCOUNT")] Discount = 55,
    [pbr::OriginalName("FEE_CODE_DOCUMENT_REISSUE_FEE")] DocumentReissueFee = 56,
    [pbr::OriginalName("FEE_CODE_DROP")] Drop = 57,
    [pbr::OriginalName("FEE_CODE_EARLY_AM_FEE")] EarlyAmFee = 58,
    [pbr::OriginalName("FEE_CODE_EARLY_CHECKOUT_FEE")] EarlyCheckoutFee = 59,
    [pbr::OriginalName("FEE_CODE_ENERGY_SURCHARGE")] EnergySurcharge = 60,
    [pbr::OriginalName("FEE_CODE_ENVIRONMENTAL_SURCHARGE")] EnvironmentalSurcharge = 61,
    [pbr::OriginalName("FEE_CODE_EQUIPMENT")] Equipment = 62,
    [pbr::OriginalName("FEE_CODE_EVENT_FEE")] EventFee = 63,
    [pbr::OriginalName("FEE_CODE_EXPRESS_HANDLING_FEE")] ExpressHandlingFee = 64,
    [pbr::OriginalName("FEE_CODE_EXTRA_CHILD_CHARGE")] ExtraChildCharge = 65,
    [pbr::OriginalName("FEE_CODE_EXTRA_PERSON_CHARGE")] ExtraPersonCharge = 66,
    [pbr::OriginalName("FEE_CODE_FACILITY_FEE")] FacilityFee = 67,
    [pbr::OriginalName("FEE_CODE_FEE")] Fee = 68,
    [pbr::OriginalName("FEE_CODE_FUEL")] Fuel = 69,
    [pbr::OriginalName("FEE_CODE_FUEL_COST_PRICE_INCREASE")] FuelCostPriceIncrease = 70,
    [pbr::OriginalName("FEE_CODE_FUEL_SURCHARGE")] FuelSurcharge = 71,
    [pbr::OriginalName("FEE_CODE_GENERAL_EXCISE_TAX")] GeneralExciseTax = 72,
    [pbr::OriginalName("FEE_CODE_GOODS_AND_SERVICE_FEE")] GoodsAndServiceFee = 73,
    [pbr::OriginalName("FEE_CODE_GOVERNMENT_RATE_SUPPLEMENT")] GovernmentRateSupplement = 74,
    [pbr::OriginalName("FEE_CODE_GOVERNMENT_RENTAL_SURCHARGE")] GovernmentRentalSurcharge = 75,
    [pbr::OriginalName("FEE_CODE_GREENS_FEES")] GreensFees = 76,
    [pbr::OriginalName("FEE_CODE_GROSS_RECEIPTS_FEE")] GrossReceiptsFee = 77,
    [pbr::OriginalName("FEE_CODE_GUEST_PC_FEE")] GuestPcFee = 78,
    [pbr::OriginalName("FEE_CODE_HIGH_SEASON_SURCHARGE")] HighSeasonSurcharge = 79,
    [pbr::OriginalName("FEE_CODE_HIGHWAY_USE_CHARGE")] HighwayUseCharge = 80,
    [pbr::OriginalName("FEE_CODE_HOLIDAY_SURCHARGE")] HolidaySurcharge = 81,
    [pbr::OriginalName("FEE_CODE_HOTEL_DEVELOPMENT_FEE")] HotelDevelopmentFee = 82,
    [pbr::OriginalName("FEE_CODE_CHILD_RESTRAINT_DEVICE_SURCHARGE")] ChildRestraintDeviceSurcharge = 83,
    [pbr::OriginalName("FEE_CODE_INSURANCE_CANCEL_CHARGE")] InsuranceCancelCharge = 84,
    [pbr::OriginalName("FEE_CODE_INSURANCE_FEE")] InsuranceFee = 85,
    [pbr::OriginalName("FEE_CODE_LATE_PM_FEE")] LatePmFee = 86,
    [pbr::OriginalName("FEE_CODE_LICENSE_RECOUPMENT_FEE")] LicenseRecoupmentFee = 87,
    [pbr::OriginalName("FEE_CODE_LOCAL_AMENITY_USAGE_FEE")] LocalAmenityUsageFee = 88,
    [pbr::OriginalName("FEE_CODE_MAINTENANCE_FEE")] MaintenanceFee = 89,
    [pbr::OriginalName("FEE_CODE_LOCAL_FEE")] LocalFee = 90,
    [pbr::OriginalName("FEE_CODE_LOCAL_GOVERNMENT_FEE")] LocalGovernmentFee = 91,
    [pbr::OriginalName("FEE_CODE_LOCAL_ORDINANCE_SURCHARGE")] LocalOrdinanceSurcharge = 92,
    [pbr::OriginalName("FEE_CODE_LOCATION_CUSTOMER_FEE")] LocationCustomerFee = 93,
    [pbr::OriginalName("FEE_CODE_MAINTENANCE_FACILITY_FEE")] MaintenanceFacilityFee = 94,
    /// <summary>
    /// FEE_CODE_MAINTENANCE_FEE = 95; duplicate from 89
    /// </summary>
    [pbr::OriginalName("FEE_CODE_MANDATORY_CHARGES_TOTAL")] MandatoryChargesTotal = 96,
    [pbr::OriginalName("FEE_CODE_MISCELLANEOUS_FEE")] MiscellaneousFee = 97,
    [pbr::OriginalName("FEE_CODE_MITIGATION_FEE")] MitigationFee = 98,
    [pbr::OriginalName("FEE_CODE_MOTOR_VEHICLE_CHARGE")] MotorVehicleCharge = 99,
    [pbr::OriginalName("FEE_CODE_NAME_CHANGE_FEE")] NameChangeFee = 100,
    [pbr::OriginalName("FEE_CODE_OPTIONAL")] Optional = 101,
    [pbr::OriginalName("FEE_CODE_OUT_OF_HOURS_FEE")] OutOfHoursFee = 102,
    [pbr::OriginalName("FEE_CODE_PACKAGE_CANCEL_CHARGE")] PackageCancelCharge = 103,
    [pbr::OriginalName("FEE_CODE_PACKAGE_FEE")] PackageFee = 104,
    [pbr::OriginalName("FEE_CODE_PARKING_FEE")] ParkingFee = 105,
    [pbr::OriginalName("FEE_CODE_PASSENGER_SERVICES_FEE")] PassengerServicesFee = 106,
    [pbr::OriginalName("FEE_CODE_PAY_ON_ARRIVAL_AMOUNT")] PayOnArrivalAmount = 107,
    [pbr::OriginalName("FEE_CODE_PC_FEE")] PcFee = 108,
    [pbr::OriginalName("FEE_CODE_PENALTY_FEE")] PenaltyFee = 109,
    [pbr::OriginalName("FEE_CODE_PET_SANITATION_FEE")] PetSanitationFee = 110,
    [pbr::OriginalName("FEE_CODE_PET_SURCHARGE")] PetSurcharge = 111,
    [pbr::OriginalName("FEE_CODE_PREMIUM_LOCATION_SURCHARGE")] PremiumLocationSurcharge = 112,
    [pbr::OriginalName("FEE_CODE_PREPAID_FUEL")] PrepaidFuel = 113,
    [pbr::OriginalName("FEE_CODE_PREPAY_AMOUNT")] PrepayAmount = 114,
    [pbr::OriginalName("FEE_CODE_PTA_SERVICE_CHARGE")] PtaServiceCharge = 115,
    [pbr::OriginalName("FEE_CODE_REFUELING_SURCHARGE")] RefuelingSurcharge = 116,
    [pbr::OriginalName("FEE_CODE_REFUNDABLE_PET_FEE")] RefundablePetFee = 117,
    [pbr::OriginalName("FEE_CODE_REGISTRATION_FEE")] RegistrationFee = 118,
    [pbr::OriginalName("FEE_CODE_REIMBURSEMENT_FEE")] ReimbursementFee = 119,
    [pbr::OriginalName("FEE_CODE_RESORT_FEE")] ResortFee = 120,
    [pbr::OriginalName("FEE_CODE_ROAD_SAFETY_PROGRAM_FEE")] RoadSafetyProgramFee = 121,
    [pbr::OriginalName("FEE_CODE_ROAD_USAGE_SURCHARGE")] RoadUsageSurcharge = 122,
    [pbr::OriginalName("FEE_CODE_ROLLAWAY_FEE")] RollawayFee = 123,
    [pbr::OriginalName("FEE_CODE_ROOM_SERVICE_FEE")] RoomServiceFee = 124,
    [pbr::OriginalName("FEE_CODE_SCREEN_FEE")] ScreenFee = 125,
    [pbr::OriginalName("FEE_CODE_SECURITY_FEE")] SecurityFee = 126,
    [pbr::OriginalName("FEE_CODE_SENIOR")] Senior = 127,
    [pbr::OriginalName("FEE_CODE_SERVICE_CHARGE")] ServiceCharge = 128,
    [pbr::OriginalName("FEE_CODE_SERVICE_FEE")] ServiceFee = 129,
    [pbr::OriginalName("FEE_CODE_SHORE_EXCURSION_FEE")] ShoreExcursionFee = 130,
    [pbr::OriginalName("FEE_CODE_STANDARD_FOOD_AND_BEVERAGE_GRATUITY")] StandardFoodAndBeverageGratuity = 131,
    [pbr::OriginalName("FEE_CODE_STATE_COST_RECOVERY_FEE")] StateCostRecoveryFee = 132,
    [pbr::OriginalName("FEE_CODE_STATE_RENTAL_FEE")] StateRentalFee = 133,
    [pbr::OriginalName("FEE_CODE_STATE_SURCHARGE")] StateSurcharge = 134,
    [pbr::OriginalName("FEE_CODE_STATE_TOURISM_FUND")] StateTourismFund = 135,
    [pbr::OriginalName("FEE_CODE_SUBTOTAL")] Subtotal = 136,
    [pbr::OriginalName("FEE_CODE_SURCHARGE")] Surcharge = 137,
    [pbr::OriginalName("FEE_CODE_SURFACE_TRANSPORTATION_CHARGE")] SurfaceTransportationCharge = 138,
    [pbr::OriginalName("FEE_CODE_SUSTAINABILITY_FEE")] SustainabilityFee = 139,
    [pbr::OriginalName("FEE_CODE_TAX")] Tax = 140,
    [pbr::OriginalName("FEE_CODE_TICKETING_FEE")] TicketingFee = 141,
    [pbr::OriginalName("FEE_CODE_TIRE_AND_BATTERY_FEE")] TireAndBatteryFee = 142,
    [pbr::OriginalName("FEE_CODE_TIRE_MANAGEMENT_FEE")] TireManagementFee = 143,
    [pbr::OriginalName("FEE_CODE_TOTAL_SURCHARGES")] TotalSurcharges = 144,
    [pbr::OriginalName("FEE_CODE_TOURISM_CHARGE")] TourismCharge = 145,
    [pbr::OriginalName("FEE_CODE_TRANSACTION_FEE")] TransactionFee = 146,
    [pbr::OriginalName("FEE_CODE_TRANSPORTATION_FEE")] TransportationFee = 147,
    [pbr::OriginalName("FEE_CODE_TRANSFER_FEE")] TransferFee = 148,
    [pbr::OriginalName("FEE_CODE_TRAVEL_TIME_FEE")] TravelTimeFee = 149,
    [pbr::OriginalName("FEE_CODE_U_DRIVE_IT_FEE")] UDriveItFee = 150,
    [pbr::OriginalName("FEE_CODE_VALIDATING_CARRIER_FEE")] ValidatingCarrierFee = 151,
    [pbr::OriginalName("FEE_CODE_VEHICLE_COLLECTION")] VehicleCollection = 152,
    [pbr::OriginalName("FEE_CODE_VEHICLE_DELIVERY")] VehicleDelivery = 153,
    [pbr::OriginalName("FEE_CODE_VEHICLE_LICENSE_FEE")] VehicleLicenseFee = 154,
    [pbr::OriginalName("FEE_CODE_VEHICLE_MAINTENANCE_FEE")] VehicleMaintenanceFee = 155,
    [pbr::OriginalName("FEE_CODE_VEHICLE_RENTAL")] VehicleRental = 156,
    [pbr::OriginalName("FEE_CODE_WINTER_SERVICE_CHARGE")] WinterServiceCharge = 157,
    [pbr::OriginalName("FEE_CODE_YOUNG_DRIVER")] YoungDriver = 158,
    [pbr::OriginalName("FEE_CODE_YOUNGER_DRIVER")] YoungerDriver = 159,
  }

  #endregion

  #region Messages
  /// <summary>
  /// The PriceBreakdownType message is meant to be used in price breakdown
  /// definitions, when we want to specify the different elements of how a total price
  /// was computed.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PriceBreakdownType : pb::IMessage<PriceBreakdownType>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PriceBreakdownType> _parser = new pb::MessageParser<PriceBreakdownType>(() => new PriceBreakdownType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PriceBreakdownType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmp.Types.V1.PriceTypeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PriceBreakdownType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PriceBreakdownType(PriceBreakdownType other) : this() {
      code_ = other.code_;
      switch (other.TypeCase) {
        case TypeOneofCase.PriceType:
          PriceType = other.PriceType;
          break;
        case TypeOneofCase.TaxCode:
          TaxCode = other.TaxCode;
          break;
        case TypeOneofCase.FeeCode:
          FeeCode = other.FeeCode;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PriceBreakdownType Clone() {
      return new PriceBreakdownType(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private string code_ = "";
    /// <summary>
    /// Type code of the price for traceability towards data in the inventory system or
    /// contract.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price_type" field.</summary>
    public const int PriceTypeFieldNumber = 2;
    /// <summary>
    /// Detailing whether the price component is the base (room, flight seat,
    /// ticket), a unit or a service surcharge or even a negative application of an
    /// offer or a discount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cmp.Types.V1.PriceType PriceType {
      get { return HasPriceType ? (global::Cmp.Types.V1.PriceType) type_ : global::Cmp.Types.V1.PriceType.Unspecified; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.PriceType;
      }
    }
    /// <summary>Gets whether the "price_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPriceType {
      get { return typeCase_ == TypeOneofCase.PriceType; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "price_type" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPriceType() {
      if (HasPriceType) {
        ClearType();
      }
    }

    /// <summary>Field number for the "tax_code" field.</summary>
    public const int TaxCodeFieldNumber = 3;
    /// <summary>
    /// The tax code of the price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cmp.Types.V1.TaxCode TaxCode {
      get { return HasTaxCode ? (global::Cmp.Types.V1.TaxCode) type_ : global::Cmp.Types.V1.TaxCode.Unspecified; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.TaxCode;
      }
    }
    /// <summary>Gets whether the "tax_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTaxCode {
      get { return typeCase_ == TypeOneofCase.TaxCode; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "tax_code" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTaxCode() {
      if (HasTaxCode) {
        ClearType();
      }
    }

    /// <summary>Field number for the "fee_code" field.</summary>
    public const int FeeCodeFieldNumber = 4;
    /// <summary>
    /// The fee code of the price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cmp.Types.V1.FeeCode FeeCode {
      get { return HasFeeCode ? (global::Cmp.Types.V1.FeeCode) type_ : global::Cmp.Types.V1.FeeCode.Unspecified; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.FeeCode;
      }
    }
    /// <summary>Gets whether the "fee_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeeCode {
      get { return typeCase_ == TypeOneofCase.FeeCode; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "fee_code" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeeCode() {
      if (HasFeeCode) {
        ClearType();
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      PriceType = 2,
      TaxCode = 3,
      FeeCode = 4,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PriceBreakdownType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PriceBreakdownType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (PriceType != other.PriceType) return false;
      if (TaxCode != other.TaxCode) return false;
      if (FeeCode != other.FeeCode) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (HasPriceType) hash ^= PriceType.GetHashCode();
      if (HasTaxCode) hash ^= TaxCode.GetHashCode();
      if (HasFeeCode) hash ^= FeeCode.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Code);
      }
      if (HasPriceType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PriceType);
      }
      if (HasTaxCode) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TaxCode);
      }
      if (HasFeeCode) {
        output.WriteRawTag(32);
        output.WriteEnum((int) FeeCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Code);
      }
      if (HasPriceType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PriceType);
      }
      if (HasTaxCode) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TaxCode);
      }
      if (HasFeeCode) {
        output.WriteRawTag(32);
        output.WriteEnum((int) FeeCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (HasPriceType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PriceType);
      }
      if (HasTaxCode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TaxCode);
      }
      if (HasFeeCode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FeeCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PriceBreakdownType other) {
      if (other == null) {
        return;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.PriceType:
          PriceType = other.PriceType;
          break;
        case TypeOneofCase.TaxCode:
          TaxCode = other.TaxCode;
          break;
        case TypeOneofCase.FeeCode:
          FeeCode = other.FeeCode;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Code = input.ReadString();
            break;
          }
          case 16: {
            type_ = input.ReadEnum();
            typeCase_ = TypeOneofCase.PriceType;
            break;
          }
          case 24: {
            type_ = input.ReadEnum();
            typeCase_ = TypeOneofCase.TaxCode;
            break;
          }
          case 32: {
            type_ = input.ReadEnum();
            typeCase_ = TypeOneofCase.FeeCode;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Code = input.ReadString();
            break;
          }
          case 16: {
            type_ = input.ReadEnum();
            typeCase_ = TypeOneofCase.PriceType;
            break;
          }
          case 24: {
            type_ = input.ReadEnum();
            typeCase_ = TypeOneofCase.TaxCode;
            break;
          }
          case 32: {
            type_ = input.ReadEnum();
            typeCase_ = TypeOneofCase.FeeCode;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
